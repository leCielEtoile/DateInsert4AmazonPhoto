"""
main.py - Amazon Photos 上の VRChat スクリーンショットに対して、ファイル名から抽出した日付・時刻を
撮影日時として自動設定するスクリプト。

依存モジュール:
- logger.py: カラー付きログ出力設定
- config.py: 設定ファイルの読み込みとエラー処理（INI形式対応）
- geckodriver.py / chromedriver.py: 各ブラウザ用ドライバの確認と自動ダウンロード

外部ライブラリ:
- Selenium: ブラウザ操作用
- tqdm, requests: ダウンロード処理支援
"""

from modules import setup_logger, load_config, error_and_exit, download_latest_geckodriver, download_latest_chromedriver, __version__

import os
import re
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions

# ロガー初期化
logger = setup_logger()
logger.info(f"STARTUP - DateInsert4AmazonPhoto v{__version__}")

# -------------------------------
# ユーティリティ関数
# -------------------------------

def extract_date_and_time_from_filename(filename):
    match = re.search(r"VRChat_(\d{4})-(\d{2})-(\d{2})_(\d{2})-(\d{2})-(\d{2})", filename)
    if not match:
        return None, None
    year, month, day, hour, minute, _ = match.groups()
    hour = int(hour)
    minute = int(minute)
    time_str = f"{'午前' if hour < 12 else '午後'}{hour % 12 if hour != 12 else 0}時{minute}分"
    return f"{year}-{month}-{day}", time_str

def wait_for_element(driver, by, selector):
    for delay in [1, 2, 3, 5, 10]:
        try:
            return WebDriverWait(driver, delay).until(EC.presence_of_element_located((by, selector)))
        except TimeoutException:
            continue
    return None

def expand_env_path(path):
    """Windows環境変数（%APPDATA% など）を展開する"""
    return os.path.expandvars(path)

def start_browser(config):
    browser = config.get("general", "browser", fallback="firefox").lower()

    if browser == "firefox":
        firefox_path = config.get("firefox", "firefox_path")
        gecko_path = config.get("firefox", "geckodriver_path")
        profile_path = config.get("firefox", "profile_path")
        if not os.path.isfile(gecko_path):
            os.makedirs(os.path.dirname(gecko_path), exist_ok=True)
            gecko_path = download_latest_geckodriver(os.path.dirname(gecko_path))
        options = FirefoxOptions()
        options.binary_location = firefox_path
        options.profile = profile_path
        service = FirefoxService(executable_path=gecko_path)
        return webdriver.Firefox(service=service, options=options)

    elif browser == "chrome":
        chrome_path = config.get("chrome", "chrome_path")
        chromedriver_path = config.get("chrome", "chromedriver_path")
        profile_directory = config.get("chrome", "profile_directory", fallback="Default")
        raw_user_data_dir = config.get("chrome", "user_data_dir")
        user_data_dir = expand_env_path(raw_user_data_dir)
        os.makedirs(user_data_dir, exist_ok=True)

        if not os.path.isfile(chromedriver_path):
            os.makedirs(os.path.dirname(chromedriver_path), exist_ok=True)
            chromedriver_path = download_latest_chromedriver(os.path.dirname(chromedriver_path))

        options = ChromeOptions()
        options.binary_location = chrome_path
        options.add_argument(f"--user-data-dir={user_data_dir}")
        options.add_argument(f"--profile-directory={profile_directory}")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--no-sandbox")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        service = ChromeService(executable_path=chromedriver_path)
        return webdriver.Chrome(service=service, options=options)

    else:
        error_and_exit(f"未対応のブラウザが指定されました: {browser}")

# -------------------------------
# メイン処理
# -------------------------------

def main():
    config = load_config()
    target_url = config.get("general", "target_url", fallback="").strip()
    wait_sec = config.getint("general", "initial_wait", fallback=5)

    if not target_url.startswith("http"):
        error_and_exit("target_url の指定が不正です。http で始まる URL を指定してください。")

    driver = None
    try:
        driver = start_browser(config)
        logger.info("Amazon Photos にアクセスします...")
        driver.get(target_url)
        time.sleep(wait_sec)

        if "signin" in driver.current_url or "ap/signin" in driver.current_url:
            error_and_exit("Amazonログイン画面にリダイレクトされました。ログイン情報が含まれていない可能性があります。")

        # TODO: 写真処理ロジックなどをここに挿入

    finally:
        if driver:
            try:
                driver.quit()
            except Exception as e:
                logger.warning(f"ブラウザの終了時にエラーが発生しました: {e}")

if __name__ == "__main__":
    main()